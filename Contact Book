import tkinter as tk
from tkinter import messagebox

class Contact:
    def __init__(self, name, phone, email, address):
        self.name = name
        self.phone = phone
        self.email = email
        self.address = address

    def __str__(self):
        return f"{self.name} - {self.phone} - {self.email} - {self.address}"

class Store:
    def __init__(self):
        self.contacts = []

    def add_contact(self, name, phone, email, address):
        new_contact = Contact(name, phone, email, address)
        self.contacts.append(new_contact)

    def view_contact_list(self):
        contacts_info = ""
        for contact in self.contacts:
            contacts_info += f"Name: {contact.name}, Phone: {contact.phone}, Email: {contact.email}, Address: {contact.address}\n"
        return contacts_info

    def search_contact(self, name=None, phone=None):
        if name:
            for contact in self.contacts:
                if contact.name.lower() == name.lower():
                    return contact
        elif phone:
            for contact in self.contacts:
                if contact.phone == phone:
                    return contact
        else:
            return None

    def update_contact(self, name, phone=None, email=None, address=None):
        contact = self.search_contact(name=name)
        if contact:
            if phone:
                contact.phone = phone
            if email:
                contact.email = email
            if address:
                contact.address = address
            return True
        return False

    def delete_contact(self, name):
        for contact in self.contacts:
            if contact.name.lower() == name.lower():
                self.contacts.remove(contact)
                return True
        return False

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.store = Store()
        self.create_widgets()

    def create_widgets(self):
        self.add_btn = tk.Button(self, text="Add Contact", command=self.add_contact)
        self.add_btn.pack()
        self.view_btn = tk.Button(self, text="View Contact", command=self.view_contact)
        self.view_btn.pack()
        self.search_btn = tk.Button(self, text="Search Contact", command=self.search_contact)
        self.search_btn.pack()
        self.update_btn = tk.Button(self, text="Update Contact", command=self.update_contact)
        self.update_btn.pack()
        self.delete_btn = tk.Button(self, text="Delete Contact", command=self.delete_contact)
        self.delete_btn.pack()

    def add_contact(self):
        name = input("Enter contact name: ")
        phone = input("Enter contact phone number: ")
        email = input("Enter contact email: ")
        address = input("Enter contact address: ")
        self.store.add_contact(name, phone, email, address)
        messagebox.showinfo("SUCCESS!", "Contact added successfully.")

    def view_contact(self):
        messagebox.showinfo("Contact List", self.store.view_contact_list())

    def search_contact(self):
        name = input("Enter contact name: ")
        contact = self.store.search_contact(name)
        if contact:
            messagebox.showinfo("Contact details: ", str(contact))
        else:
            messagebox.showerror("ERROR, SORRY!", "Contact NOT found")

    def update_contact(self):
        name = input("Enter contact name: ")
        phone = input("Enter new phone number(press enter to skip): ")
        email = input("Enter new email(press enter to skip): ")
        address = input("Enter new address(press enter to skip): ")
        if self.store.update_contact(name, phone, email, address):
            messagebox.showinfo("SUCCESS!", "Contact updated successfully")
        else:
            messagebox.showerror("ERROR, SORRY!", "Contact NOT found")

    def delete_contact(self):
        name = input("Enter contact name: ")
        if self.store.delete_contact(name):
            messagebox.showinfo("SUCCESS!", "Contact deleted successfully.")
        else:
            messagebox.showerror("ERROR, SORRY!", "Contact NOT found")

    def run(self):
        self.mainloop()

if __name__ == "__main__":
    app = App()
    app.run()
